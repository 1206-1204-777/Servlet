クラスにおける「属性」と「操作」について
	クラスは属性と操作の要素を含む。属性は人物なら名前、住所などその人を構成する要素、操作はその人物が行う動作を指す。
	属性は入れ子構造に近く、例として「会社」の勤怠管理アプリなら「会社」の「社員」の中の「人物」という構造になる。
	この場合は「会社」と「社員」のクラスを作成し、「会社クラス」の「社員」と「社員クラス」を紐づける。
	
	属性には「型」が付属する。型とは名前なら文字列、IDなら数値などを指す。
	
可視性
「+」・・・すべてのクラスからアクセス可能
「-」・・・自クラスのみアクセス可能
「#」・・・自クラスおよび継承されているクラスからアクセス可能
「~」・・・同一パッケージ内のクラスからアクセス可能　これらの符号を用いてどの程度クラスへのアクセスが可能かを示す。

「関連」「多重度」「誘導可能性」(クラス同士の繋がり)について
	「関連」はクラス間の関係性(どのクラスがなんのクラスとつながっているか)
	
	「多重度」はあるクラスAから見たクラスBの数を指す。
		会社クラス(クラスA)には社員クラス(クラスB)がいくつあるかの意。「会社」1----------1..*「社員」と表す。
		関係上１つしか存在しないものに1、複数あるクラスにはその数を表記する。(..は～(どこから)の意)
		
	「誘導可能性」はクラス同士のやり取りの方向性を示す。誘導可能性は方向が決まっており、下のクラスが上のクラスの操作を行うことはできない。
		「会社」は「社員クラス」を操作できるが、逆はできない。
		
		「凡化」「特化」「実現」
			「凡化」具体的なクラス(事務社員クラス)を抽象的なクラスへと戻すこと。(矢印を上に向ける)
				継承を使用してBクラスからCクラスを作成した場合この２つの関係を「凡化」関係という。
				(抽象的なクラスとそこから具体化したクラスの関係)
			
			「特化」凡化の逆で、抽象クラスから具体的なクラスを作成すること。
			
			「実現」インターフェースとそれを使用したクラスの関係性。
			
「集約」と「コンポジット」と「依存」について
	「集約」はクラス同士の関係が全体と部分の関係であることを指す。(会社クラスの中に社員クラスという部分があることの関係)
	
	「コンポジット」は全体のクラスが個々のクラスに対して何らかの操作を行う権利がある関係を指す。
	
	「依存」はクラス同士の弱い関係を指す。「会社クラス」->「部署クラス」->「社員クラス」の関係の場合は「会社クラス」と「社員クラス」が
	それにあたる。
	
「インターフェース」
	共通した機能を実装したもの(機能を部品化するために作成)。
	インターフェースを継承することでそのクラスはインターフェース内の機能を実装でき、複数のクラスで同じ動作を行うことができる。

クラス図作成に使用する矢印まとめ	
C:\Users\gribe\OneDrive\画像

